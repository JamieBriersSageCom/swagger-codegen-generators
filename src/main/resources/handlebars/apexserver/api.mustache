{{#operations}}
//.register(new {{classname}}('someuri')
public class {{classname}} extends AbstractBaseController {

    public {{classname}}(String uri){
        super(uri);
    }

{{! Loop through operations }}
{{#operation}}
    protected override void handleConfigure{{httpMethod}}() {

    {{~#queryParams}}

        {{! add param to QueryParam list, and terminate, unless its also required OR an enum }}
        Request.QueryParameters.add{{dataType}}Parameter('{{paramName}}'){{#unless required}}{{#unless isEnum}};{{/unless}}{{/unless}}
        {{#required}}{{! If required then set mandatory and terminate in semi colon, unless this is also an enum }}
            .Mandatory(){{#unless isEnum}};{{/unless}}
        {{/required}}
        {{#isEnum}}{{! If enum then restrict values }}
            .Restrict(new List<{{dataType}}>(
                {{~#allowableValues~}}
                    {{~#enumVars~}}
                        '{{{value}}}'{{^@last}}, {{/@last}}
                    {{~/enumVars~}}
                {{~/allowableValues~}}));
        {{/isEnum}}
    {{~/queryParams}}
    }

{{/operation}}

{{#operation}}
    protected override HttpResponse handle{{httpMethod}}() {

    {{~#queryParams}}

        {{dataType}} {{paramName}} = ({{dataType}}) Request.QueryParameters.get('{{paramName}}').value();

    {{~/queryParams}}

        return SomeServiceLayer.{{operationId}}({{#queryParams}}{{paramName}}{{^@last}}, {{/@last}}{{/queryParams}});
    }

{{/operation}}
}

{{/operations}}